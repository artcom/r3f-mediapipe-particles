{"version":3,"file":"index.js","names":["useFrame","useMemo","useRef","AdditiveBlending","MathUtils","ParticleSphereMaterial","ParticleSphere","count","props","ref","radius","particlesPosition","positions","Float32Array","i","distance","Math","sqrt","random","theta","randFloatSpread","phi","x","sin","cos","y","z","set","clock","current","material","uniforms","uTime","value","elapsedTime","length","key"],"sources":["../../../src/components/particleSphere/index.jsx"],"sourcesContent":["import { useFrame } from \"@react-three/fiber\"\nimport { useMemo, useRef } from \"react\"\nimport { AdditiveBlending, MathUtils } from \"three\"\nimport { ParticleSphereMaterial } from \"./ParticleSphereMaterial\"\n\nconst ParticleSphere = ({ count, ...props }) => {\n  const ref = useRef()\n\n  const radius = 2\n\n  const particlesPosition = useMemo(() => {\n    const positions = new Float32Array(count * 3)\n\n    for (let i = 0; i < count; i++) {\n      const distance = Math.sqrt(Math.random() - 0.5) * radius\n      const theta = MathUtils.randFloatSpread(360)\n      const phi = MathUtils.randFloatSpread(360)\n\n      const x = distance * Math.sin(theta) * Math.cos(phi)\n      const y = distance * Math.sin(theta) * Math.sin(phi)\n      const z = distance * Math.cos(theta)\n\n      positions.set([x, y, z], i * 3)\n    }\n\n    return positions\n  }, [count])\n\n  useFrame(({ clock }) => {\n    ref.current.material.uniforms.uTime.value = clock.elapsedTime * 0.1\n  })\n\n  return (\n    <points ref={ref} {...props}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={particlesPosition.length / 3}\n          array={particlesPosition}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <particleSphereMaterial\n        key={ParticleSphereMaterial.key}\n        blending={AdditiveBlending}\n        depthWrite={false}\n        uRadius={radius}\n      />\n    </points>\n  )\n}\n\nexport default ParticleSphere\n"],"mappings":";;;AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,SAASC,gBAAgB,EAAEC,SAAS,QAAQ,OAAO;AACnD,SAASC,sBAAsB,QAAQ,0BAA0B;AAAA;AAAA;AAEjE,IAAMC,cAAc,GAAG,SAAjBA,cAAc,OAA4B;EAAA,IAAtBC,KAAK,QAALA,KAAK;IAAKC,KAAK;EACvC,IAAMC,GAAG,GAAGP,MAAM,EAAE;EAEpB,IAAMQ,MAAM,GAAG,CAAC;EAEhB,IAAMC,iBAAiB,GAAGV,OAAO,CAAC,YAAM;IACtC,IAAMW,SAAS,GAAG,IAAIC,YAAY,CAACN,KAAK,GAAG,CAAC,CAAC;IAE7C,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,IAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAGR,MAAM;MACxD,IAAMS,KAAK,GAAGf,SAAS,CAACgB,eAAe,CAAC,GAAG,CAAC;MAC5C,IAAMC,GAAG,GAAGjB,SAAS,CAACgB,eAAe,CAAC,GAAG,CAAC;MAE1C,IAAME,CAAC,GAAGP,QAAQ,GAAGC,IAAI,CAACO,GAAG,CAACJ,KAAK,CAAC,GAAGH,IAAI,CAACQ,GAAG,CAACH,GAAG,CAAC;MACpD,IAAMI,CAAC,GAAGV,QAAQ,GAAGC,IAAI,CAACO,GAAG,CAACJ,KAAK,CAAC,GAAGH,IAAI,CAACO,GAAG,CAACF,GAAG,CAAC;MACpD,IAAMK,CAAC,GAAGX,QAAQ,GAAGC,IAAI,CAACQ,GAAG,CAACL,KAAK,CAAC;MAEpCP,SAAS,CAACe,GAAG,CAAC,CAACL,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC,EAAEZ,CAAC,GAAG,CAAC,CAAC;IACjC;IAEA,OAAOF,SAAS;EAClB,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEXP,QAAQ,CAAC,iBAAe;IAAA,IAAZ4B,KAAK,SAALA,KAAK;IACfnB,GAAG,CAACoB,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAGL,KAAK,CAACM,WAAW,GAAG,GAAG;EACrE,CAAC,CAAC;EAEF,oBACE;IAAQ,GAAG,EAAEzB;EAAI,GAAKD,KAAK;IAAA,wBACzB;MAAA,uBACE;QACE,MAAM,EAAC,qBAAqB;QAC5B,KAAK,EAAEG,iBAAiB,CAACwB,MAAM,GAAG,CAAE;QACpC,KAAK,EAAExB,iBAAkB;QACzB,QAAQ,EAAE;MAAE;IACZ,EACa,eACjB;MAEE,QAAQ,EAAER,gBAAiB;MAC3B,UAAU,EAAE,KAAM;MAClB,OAAO,EAAEO;IAAO,GAHXL,sBAAsB,CAAC+B,GAAG,CAI/B;EAAA,GACK;AAEb,CAAC;AAED,eAAe9B,cAAc"}