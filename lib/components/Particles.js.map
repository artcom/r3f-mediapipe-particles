{"version":3,"file":"Particles.js","names":["useFrame","React","forwardRef","useEffect","useImperativeHandle","useMemo","useRef","useState","AdditiveBlending","CanvasTexture","Float32BufferAttribute","Uint16BufferAttribute","Vector2","Vector3","ParticlesMaterial","renderOffscreenToCanvas","debugCanvasRef","bitmap","width","height","visible","debugContext","current","getContext","clearRect","scale","drawImage","Particles","ref","options","images","setImages","particlesMaterialRef","blur","thresholds","mask","smoothCount","random","depth","size","color","innerColor","exponent","speed","resultOffscreen","OffscreenCanvas","resultOffscreenContext","offscreens","i","length","filter","data","pixelCount","imageData","getImageData","result","context","j","createImageData","indices","Uint16Array","offsets","Float32Array","visibleCount","value","Math","floor","putImageData","transferToImageBitmap","texture","attributes","clock","uniforms","uTime","elapsedTime","setImage","image","state","pop","PI","r","g","b","key"],"sources":["../../src/components/Particles.js"],"sourcesContent":["import { useFrame } from \"@react-three/fiber\"\nimport React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport {\n  AdditiveBlending,\n  CanvasTexture,\n  Float32BufferAttribute,\n  Uint16BufferAttribute,\n  Vector2,\n  Vector3,\n} from \"three\"\nimport { ParticlesMaterial } from \"./ParticlesMaterial\"\n\nconst renderOffscreenToCanvas = (\n  debugCanvasRef,\n  bitmap,\n  width,\n  height,\n  visible,\n) => {\n  const debugContext = debugCanvasRef.current.getContext(\"2d\")\n  debugContext.clearRect(\n    0,\n    0,\n    debugCanvasRef.current.width,\n    debugCanvasRef.current.height,\n  )\n  debugContext.scale(1, -1)\n\n  if (visible) {\n    debugContext.drawImage(bitmap, 0, 0, width, height * -1)\n  }\n}\n\nconst Particles = forwardRef(\n  ({ debugCanvasRef, width, height, options }, ref) => {\n    const [images, setImages] = useState([])\n\n    const particlesMaterialRef = useRef()\n\n    const {\n      blur,\n      thresholds,\n      mask,\n      smoothCount,\n      random,\n      depth,\n      size,\n      color,\n      innerColor,\n      exponent,\n      speed,\n    } = options\n\n    const { resultOffscreen, resultOffscreenContext } = useMemo(() => {\n      const resultOffscreen = new OffscreenCanvas(width, height)\n      const resultOffscreenContext = resultOffscreen.getContext(\"2d\")\n      resultOffscreenContext.scale(1, -1)\n\n      return { resultOffscreen, resultOffscreenContext }\n    }, [width, height, blur])\n\n    const offscreens = useMemo(() => {\n      const offscreens = []\n\n      for (let i = 0; i < images.length; i++) {\n        offscreens[i] = new OffscreenCanvas(width, height)\n        offscreens[i].getContext(\"2d\").scale(1, -1)\n        offscreens[i].getContext(\"2d\").filter = `blur(${blur}px)`\n      }\n\n      return offscreens\n    }, [images, width, height, blur])\n\n    const data = useMemo(() => {\n      if (images.length < smoothCount || offscreens.length === 0) {\n        return\n      }\n\n      const pixelCount = width * height\n\n      let imageData\n\n      if (smoothCount === 0) {\n        offscreens[0]\n          .getContext(\"2d\")\n          .drawImage(images[0], 0, 0, width, height * -1)\n        imageData = offscreens[0]\n          .getContext(\"2d\")\n          .getImageData(0, 0, width, height)\n      } else {\n        const result = []\n        for (let i = 0; i < pixelCount * 4; i++) {\n          result[i] = 0\n        }\n\n        for (let i = 0; i < images.length; i++) {\n          const context = offscreens[i].getContext(\"2d\")\n          context.drawImage(images[i], 0, 0, width, -height)\n\n          const imageData = context.getImageData(0, 0, width, height)\n          for (let j = 0; j < pixelCount * 4; j++) {\n            result[j] += imageData.data[j]\n          }\n        }\n\n        imageData = resultOffscreenContext.createImageData(width, height)\n        for (let i = 0; i < pixelCount * 4; i++) {\n          imageData.data[i] = result[i] / images.length\n        }\n      }\n\n      const indices = new Uint16Array(pixelCount)\n      const offsets = new Float32Array(pixelCount * 3)\n\n      let visibleCount = 0\n      for (let i = 0; i < pixelCount; i++) {\n        const value = imageData.data[i * 4 + 3]\n\n        if (value >= thresholds[0] && value <= thresholds[1]) {\n          offsets[visibleCount * 3 + 0] = i % width\n          offsets[visibleCount * 3 + 1] = Math.floor(i / width)\n\n          indices[visibleCount] = i\n\n          visibleCount++\n        }\n      }\n\n      resultOffscreenContext.putImageData(imageData, 0, 0)\n      const bitmap = resultOffscreen.transferToImageBitmap()\n      renderOffscreenToCanvas(debugCanvasRef, bitmap, width, height, mask)\n\n      return {\n        texture: new CanvasTexture(bitmap),\n        attributes: { indices, offsets },\n      }\n    }, [images, blur, resultOffscreen, resultOffscreenContext, offscreens])\n\n    useFrame(({ clock }) => {\n      if (particlesMaterialRef.current) {\n        particlesMaterialRef.current.uniforms.uTime.value = clock.elapsedTime\n      }\n    })\n\n    useImperativeHandle(ref, () => ({\n      setImage: (image) =>\n        setImages((state) => {\n          if (state.length > smoothCount) {\n            state.pop()\n          }\n          return [image, ...state]\n        }),\n    }))\n\n    useEffect(() => {\n      setImages([])\n    }, [smoothCount])\n\n    return (\n      <>\n        {data && (\n          <mesh rotation-y={Math.PI}>\n            <instancedBufferGeometry\n              index={new Uint16BufferAttribute([0, 2, 1, 2, 3, 1], 1)}\n              attributes-position={\n                new Float32BufferAttribute(\n                  [\n                    -0.5, 0.5, 0.0, 0.5, 0.5, 0.0, -0.5, -0.5, 0.0, 0.5, -0.5,\n                    0.0,\n                  ],\n                  3,\n                )\n              }\n              attributes-uv={\n                new Float32BufferAttribute(\n                  [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0],\n                  2,\n                )\n              }>\n              <instancedBufferAttribute\n                attach=\"attributes-pindex\"\n                args={[data.attributes.indices, 1, false]}\n              />\n              <instancedBufferAttribute\n                attach=\"attributes-offset\"\n                args={[data.attributes.offsets, 3, false]}\n              />\n              <instancedBufferAttribute />\n            </instancedBufferGeometry>\n            <particlesMaterial\n              ref={particlesMaterialRef}\n              key={ParticlesMaterial.key}\n              uTexture={data.texture}\n              uTextureSize={\n                new Vector2(data.texture.image.width, data.texture.image.height)\n              }\n              uRandom={random}\n              uDepth={depth}\n              uSize={size}\n              uSpeed={speed}\n              uColor={\n                new Vector3(color.r / 255.0, color.g / 255.0, color.b / 255.0)\n              }\n              uInnerColor={\n                new Vector3(\n                  innerColor.r / 255.0,\n                  innerColor.g / 255.0,\n                  innerColor.b / 255.0,\n                )\n              }\n              uExponent={exponent}\n              blending={AdditiveBlending}\n              depthWrite={false}\n            />\n          </mesh>\n        )}\n      </>\n    )\n  },\n)\n\nexport default Particles\n"],"mappings":"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"}